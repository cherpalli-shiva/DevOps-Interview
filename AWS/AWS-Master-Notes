1. Introduction to Cloud Computing & AWS Fundamentals

• Cloud Computing Definition: Cloud computing is the delivery of computing services—including servers, storage, databases, networking, software, analytics, and more—over the internet (the cloud) instead of using local computers or personal hardware. It solves problems like resource wastage by allowing virtualization and abstraction of physical server locations.

• Types of Cloud Services:
    ◦ IaaS (Infrastructure as a Service): Provides fundamental computing resources like virtual machines (e.g., AWS EC2), storage, and networks, giving users high control over their infrastructure.

    ◦ PaaS (Platform as a Service): Offers a complete development and deployment environment, allowing users to build applications without managing the underlying infrastructure (e.g., Heroku, Google App Engine).

    ◦ SaaS (Software as a Service): Delivers software applications over the internet on a subscription basis (e.g., Gmail, Dropbox, Microsoft 365), where the provider manages all aspects of the application and infrastructure.

• Cloud Deployment Models:
    ◦ Public Cloud:
        ▪ Owned and operated by third-party companies like AWS, Microsoft Azure, or Google Cloud.
        ▪ Resources are shared across many users but are securely isolated.
        ▪ Popular Reasons: No upfront cost (pay-as-you-go), instant scalability, fast deployment, global reach, managed services, high availability & reliability, security & compliance (providers invest heavily), and allows teams to focus on innovation.
        ▪ Example Use Case: Startups or companies wanting to avoid infrastructure management.

    ◦ Private Cloud:
        ▪ Used exclusively by one organization. Can be hosted on-premises or by a third-party provider.
        ▪ Features: Dedicated resources, more control over security and compliance, higher customization and performance.
        ▪ Often used by large enterprises or government agencies, especially where data security, compliance, or control is critical.
        ▪ Components: Physical servers, storage systems, networking devices, virtualization platform (e.g., VMware, Microsoft Hyper-V), cloud management software (e.g., OpenStack), security tools, and monitoring/automation tools.

• Why AWS is Popular (First-Mover Advantage & Market Share):
    ◦ First-Mover Advantage: Launched in 2006, significantly earlier than Azure (2010) and GCP (2011), allowing it more time to grow and mature.
    ◦ Largest Market Share: Holds the biggest share in the cloud market, trusted by major companies like Netflix, NASA, and Airbnb.
    ◦ Wide Range of Services: Offers 200+ services, covering compute, storage, databases, machine learning, IoT, DevOps, and more.
    ◦ Global Infrastructure: Operates in 30+ regions and 100+ availability zones worldwide for better performance and proximity to users.
    ◦ Strong Ecosystem: Massive community, tutorials, certification programs, and support forums, with many third-party tools integrating easily.
    ◦ Reliable and Scalable: Designed for high availability, auto-scaling, and fault tolerance.
    ◦ Security and Compliance: Complies with global standards like ISO, SOC, PCI-DSS, HIPAA, with strong IAM and encryption support.
    ◦ Constant Innovation: Regularly adds new services and improves existing ones, staying ahead in technologies like AI/ML, serverless, and containers.

2. Core AWS Services
2.1. AWS IAM (Identity and Access Management)
• Purpose: Securely manage who can access what in your cloud environment. It controls authentication (verifying identity) and authorization (granting permissions).

• Key Concepts:
    ◦ Users: Represents an individual entity (human, service, or application) with a unique identity (username, password, or API key). Can be assigned permissions directly or via groups/roles/policies.
    ◦ Policies: Define what actions a user, group, or role can perform on which resources. Written in JSON format, they are instructions that define permissions (e.g., read, write, delete). They can be attached to users, groups, or roles.
    ◦ Groups: A collection of users with similar permissions. Simplifies management by assigning permissions to the group, which all users in that group inherit.
    ◦ Roles: Similar to users but are meant to be assumed by entities (users, applications, AWS services) to delegate permissions temporarily. They do not require a password and are useful for cross-account access or for services to access other services (e.g., EC2 instance accessing S3).

• Root User vs. IAM Users: The root user has full access to everything but is a major security risk for daily use. Best practice is to create IAM users with limited permissions.

2.2. Amazon Virtual Private Cloud (VPC)
• Purpose: Your own private network inside AWS for launching and managing AWS resources in a secure, isolated environment. Provides separation and security, like a personal gated community.
• Components:
    ◦ IP Address Range (CIDR Block): Defines the network's IP address range (e.g., 10.0.0.0/16), determining the number of available IP addresses.

    ◦ Subnet: A smaller section of your VPC’s IP address range, used to group resources and control network access.
        ▪ Public Subnet: Can access the internet via an Internet Gateway.
        ▪ Private Subnet: No direct internet access, but can use a NAT Gateway for outbound access.

    ◦ Internet Gateway (IGW): A VPC component that allows communication between resources in your VPC and the public internet. Required for public subnets to access the internet.

    ◦ Route Table: A set of rules that determine how traffic is directed within a VPC. Each subnet must be associated with a route table.

    ◦ Security Group (SG): A virtual firewall that controls inbound and outbound traffic to/from AWS resources, primarily EC2 instances.
        ▪ Stateful: If inbound traffic is allowed, return outbound traffic is automatically allowed.
        ▪ Attached to EC2 instances, Load Balancers, RDS, Lambda.
        ▪ Default Behavior: Deny all inbound; allow all outbound.
        ▪ Only allows traffic; cannot deny traffic.

    ◦ Network Access Control List (NACL): A stateless firewall for controlling inbound and outbound traffic at the subnet level.
        ▪ Stateless: If inbound traffic is allowed, you must explicitly allow return outbound traffic.
        ▪ Can allow AND deny traffic.
        ▪ Rules are processed in order (lowest to highest rule number).
        ▪ Default NACL allows all inbound and outbound traffic.

    ◦ NAT Gateway (Network Address Translation Gateway): Allows instances in a private subnet to connect to the internet for outbound traffic (e.g., software updates) without exposing them directly to the internet. It translates private IP addresses to its own public IP.
    ◦ VPC Flow Logs: Track all network traffic in and out of your VPC, useful for monitoring and troubleshooting.

• Security Group vs. NACL:
    ◦ Security Groups: Instance-level, stateful, only allow rules.
    ◦ NACLs: Subnet-level, stateless, allow and deny rules, processed by rule number.
    ◦ Best Practice: Use both for multiple layers of security; SGs for fine-grained instance control, NACLs for broader subnet policies.

2.3. Amazon EC2 (Elastic Compute Cloud)
• Purpose: A service that lets you launch virtual machines (VMs) in the cloud, acting as a rented computer/server in AWS.
• "Elastic" Meaning: Automatically scale your resources up or down based on demand. Important because workloads are unpredictable, ensuring systems handle changing traffic without crashing or wasting money (pay for what you use).
• Main EC2 Instance Types (Families): General Purpose, Compute Optimized, Memory Optimized, Storage Optimized, Accelerated Computing, Burstable.
• Use Cases: Hosting applications (websites, APIs), running containers, data processing, CI/CD pipelines, development & testing.
• Cost Optimization: Right-sizing instances, using Reserved Instances (RIs)/Savings Plans for long-term workloads, Auto Scaling to scale on demand, Spot Instances for flexible/fault-tolerant tasks, and scheduling EC2 start/stop.

2.4. Amazon S3 (Simple Storage Service)
• Purpose: A scalable, durable, and secure cloud object storage service. Used for storing and retrieving any amount of data from anywhere on the web.
• S3 Buckets: Containers for storing objects (files). Each bucket has a unique name globally across all of AWS.
• S3 Objects: The actual files stored inside a bucket, accessed via unique keys (names).

• Key Benefits:
    ◦ High Durability & Availability: 99.999999999% (11 nines) durability; data copied to multiple locations.
    ◦ Scalability: Store and retrieve any amount of data (petabytes) without capacity concerns.
    ◦ Security: Encryption (server-side, client-side), access control (IAM policies, bucket policies, ACLs), and audit logging.
    ◦ Performance: High upload/download speeds, supporting multipart uploads for large files.
    ◦ Cost-Effective: Different storage classes optimize costs based on access patterns.
    ◦ Versioning: Keeps multiple versions of an object, protecting against accidental deletions or overwrites.

• S3 Storage Classes:
    ◦ S3 Standard: Frequently accessed data (e.g., real-time apps, websites). High durability and availability.
    ◦ S3 Standard-IA (Infrequent Access): Less frequently accessed data that needs rapid access (e.g., backups, disaster recovery). High durability but lower availability.
    ◦ S3 One Zone-IA: Same as Standard-IA but stored in a single AZ (data lost if AZ fails).
    ◦ S3 Glacier Instant Retrieval: Archival data needing millisecond access (e.g., medical records).
    ◦ S3 Glacier Flexible Retrieval: Long-term archival with flexible retrieval options (hours).
    ◦ S3 Glacier Deep Archive: Cheapest, for files rarely accessed (hours to days retrieval).

• Securing S3 Buckets: Block public access, use IAM policies for fine-grained access, use bucket policies to restrict access, encrypt data (SSE-S3, SSE-KMS, SSE-C, Client-Side), enable MFA delete, enable logging and monitoring, restrict access via VPC endpoints (PrivateLink).

• Static Website Hosting: S3 can host static websites (HTML, CSS, JavaScript) by enabling static website hosting, uploading files, and setting appropriate bucket policies. Does not support dynamic content.

• Encryption: S3 supports encryption at rest (Server-Side Encryption: SSE-S3, SSE-KMS, SSE-C; Client-Side Encryption) and encryption in transit (SSL/TLS via HTTPS).

• On-premises to S3 Connection: AWS Direct Connect (private network link), AWS VPN (encrypted tunnel), AWS Storage Gateway (bridge, e.g., File Gateway, Volume Gateway).

2.5. AWS CloudFormation (Infrastructure as Code - IaC)
• Purpose: Define and provision AWS infrastructure as code using declarative templates (YAML or JSON). Instead of manual configuration, you describe the desired state of resources, and CloudFormation creates them.
• How it Works:
    1. Template Defines Resources: Write a YAML/JSON file declaring AWS resources (EC2, S3, VPC, etc.).
    2. CloudFormation Reads Template: Interprets the resources and configurations.
    3. CloudFormation Calls AWS APIs: Uses AWS service APIs to create the resources.
    4. Resources Provisioned in a Stack: All resources are grouped into a stack (a single unit, like a project container). You can view, update, or delete all resources in a stack at once.

• Template Structure:
    ◦ AWSTemplateFormatVersion (Optional).
    ◦ Description (Optional).
    ◦ Metadata (Optional).
    ◦ Parameters (Optional): Input values passed at deployment time for flexibility (e.g., InstanceType).
    ◦ Mappings (Optional): Static variables for lookups (e.g., region-specific AMI IDs).
    ◦ Conditions (Optional): Specifies when resources are created based on logic.
    ◦ Resources (REQUIRED): The core section defining AWS resources and their configurations.
    ◦ Outputs (Optional): Values exported from the stack (e.g., InstanceID, URLs).

• Key Features:
    ◦ Declarative Approach: Define what should exist, not how to create it.
    ◦ Version Control: Templates can be stored in Git for tracking changes.
    ◦ Drift Detection: Helps find differences between actual AWS resources and the CFT definition, detecting manual changes made outside of CloudFormation.
    ◦ Stack Management: Resources managed as a single unit.

2.6. Amazon CloudWatch (Monitoring and Observability)
• Purpose: A monitoring and observability service for AWS cloud resources and applications. Collects, visualizes, analyzes, and responds to system performance data.
• What CloudWatch Can Do:
    ◦ Metrics: Collects and stores time-series data (e.g., CPU usage, memory, request count). AWS provides default metrics; Custom Metrics can be pushed for application-specific data or non-AWS resources.
        ▪ Key Properties: Namespace, Metric Name, Dimensions, Timestamp, Value, Unit.

    ◦ Logs: Captures and manages log data from applications, services, and OS.
        ▪ Log Groups: Organizes related logs (e.g., per service).
        ▪ Log Streams: Individual events/logs within a log group.
        ▪ Log Insights: Interactive query tool for searching and analyzing log data.

    ◦ Alarms: Watches a metric and performs one or more actions based on a defined threshold. Actions can include sending SNS notifications, auto-scaling, or stopping instances.

    ◦ Dashboards: Visualizes metrics in real-time for quick overview of system health.

    ◦ Events/Rules: Responds to changes in resources (e.g., EC2 stop/start).

• Common Use Cases: Monitor EC2 CPU/Memory, set alarms for high traffic, centralize application logs, automatically restart unresponsive instances, track system health.

2.7. AWS Lambda (Serverless Compute)
• Purpose: A serverless compute service that lets you run code without provisioning or managing servers. You upload your code, and Lambda manages everything.

• Key Features:
    ◦ Event-Driven: Functions are triggered by events (e.g., S3 uploads, API Gateway calls, DynamoDB streams, CloudWatch events).
    ◦ Automatic Scaling: Lambda automatically scales your application by running code in response to each trigger.
    ◦ Pay-per-Use: You pay only for the compute time consumed (measured in milliseconds).
    ◦ Supports Many Languages: Python, Node.js, Java, Go, C#, Ruby, and custom runtimes.
• Basic Components:
    ◦ Function: Your code + runtime + configuration.
    ◦ Trigger: What invokes the function.
    ◦ Execution Role: IAM role defining what AWS resources your function can access.
• Real-World Use Cases: Automated image processing, chatbots, scheduled data backups, real-time analytics, API backends.
• Cost Optimization:
    ◦ Right-size Memory Allocation: Lambda charges based on memory × execution time.
    ◦ Minimize Execution Time: Keep functions lightweight, reuse database connections.
    ◦ Use Efficient Triggers: Filter events, batch processing.
    ◦ Choose Right Runtime: Some runtimes (Python, Node.js) start/run faster.
    ◦ Use Reserved Concurrency Wisely: Prevent unexpected costs from spikes.
    ◦ Monitor and Analyze Usage: Use CloudWatch Metrics and Cost Explorer.

2.8. AWS CloudFront (Content Delivery Network - CDN)
• Purpose: A Content Delivery Network (CDN) service that securely delivers content (webpages, videos, APIs, data) to users with low latency and high transfer speed.
• How it Works:
    1. User requests content.
    2. CloudFront checks the nearest Edge Location (worldwide network of servers) cache.
    3. If cached, content is returned immediately.
    4. If not cached, CloudFront fetches it from the origin (e.g., S3, EC2), caches it, then serves the user.
• Benefits: Reduced latency, enhanced security (acts as a shield, integrates with WAF/Shield), cost optimization (reduces origin requests), scalability.
• Use Cases: Hosting static websites (from S3), streaming videos, accelerating API responses, securing dynamic content.
• Cost Optimization Tips: Use caching, enable compression, restrict S3 access using Origin Access Control (OAC), invalidate wisely, use Lambda@Edge only when needed.
• SSL Certificates: S3 buckets do not directly support SSL/TLS; CloudFront or ALB must be used to enable HTTPS for S3 content.

2.9. Amazon ECR (Elastic Container Registry)
• Purpose: A fully managed container registry service to store, manage, and deploy Docker container images. Integrates seamlessly with ECS, EKS, and Lambda.

• Key Features: Fully managed, secure (IAM, KMS encryption), scalable, high availability, integrates with ECS/EKS/Docker CLI/CodeBuild.

• How it Works: Push Docker images to ECR repositories, ECR stores them securely, services (ECS/EKS) pull images from ECR to run containers, manage repositories and policies.

• Why use ECR over Docker Hub (Comparison):
    ◦ Ownership & Integration: AWS service, fully integrated with AWS (ECS, EKS, Lambda, IAM, KMS). Docker Hub is Docker Inc. owned, designed for Docker ecosystem, less AWS-specific integration.
    ◦ Security & Access Control: ECR has IAM-based fine-grained access, vulnerability scanning. Docker Hub has basic user authentication, more limited access control.
    ◦ Public vs. Private Repositories: ECR supports both, IAM for private access. Docker Hub has public by default, private with paid plan.

    ◦ Pricing: ECR has free tier (500MB storage, 500GB transfer for 12 months), charges for storage/transfer/requests. Docker Hub has free public repos, private with paid plans.

    ◦ Performance: ECR optimized for high-performance within AWS ecosystem, faster pulls/pushes for AWS services. Docker Hub may experience slower speeds for large images or outside Docker's global infra.
• Cost Optimization Tips: Use Lifecycle Policies to delete old images automatically, enable Image Scanning for vulnerabilities.

2.10. AWS ECS (Elastic Container Service)
• Purpose: A fully managed container orchestration service to deploy, manage, and scale Docker containerized applications.
• Why ECS Exists: Solves limitations of Docker alone (no auto-healing, no auto-scaling, IP address changes).

• Key Concepts:
    ◦ Cluster: Logical grouping of tasks or services.
    ◦ Task Definition: Blueprint for your application (Docker image, CPU/memory, ports).
    ◦ Task: A running instance of a Task Definition.
    ◦ Service: Maintains a desired number of running tasks.
    ◦ Container: A single Docker container specified in a Task Definition.
    ◦ Launch Type: Determines where tasks run: Fargate (serverless) or EC2 (manage your own instances).

• Fargate (Serverless Launch Type):
    ◦ No need to provision/manage EC2 instances.
    ◦ Pay only for vCPU and memory used by tasks.
    ◦ Easier to get started, improved security (each task in its own kernel).

• EC2 (Launch Type): Requires you to manage a fleet of EC2 instances, more control over infrastructure.

• Advantages of ECS: Simplicity, AWS managed service, tight integration with AWS services (IAM, CloudWatch, ECR, ALB), Fargate support, cost-effective for small-to-medium workloads.
• Disadvantages of ECS: AWS lock-in (not portable), fewer features (no CRDs, Istio, ArgoCD), limited networking/security compared to Kubernetes.

2.11. Amazon EKS (Elastic Kubernetes Service)
• Purpose: A fully managed Kubernetes service provided by AWS. Runs upstream Kubernetes, compatible with any Kubernetes-native tools. AWS handles control plane management and patching.
• Key Features: Supports Fargate and EC2 worker nodes, compatible with Kubernetes ecosystem (Helm, Prometheus), AWS manages control plane.

• Advantages of EKS: Cloud-native Kubernetes (portable), large open-source community/ecosystem, works with standard DevOps tools, highly customizable.
• Disadvantages of EKS: More complex setup/management than ECS, steeper learning curve, higher cost for control plane (billed per cluster).

2.12. Comparison: ECS vs. EKS vs. Self-Managed Kubernetes
• Self-Managed Kubernetes: Open-source, runs anywhere (on-premises, any cloud), full control and flexibility, huge ecosystem, portability, no vendor lock-in. High operational overhead (you manage everything).
• What ECS Doesn’t Have That Kubernetes Does:
    ◦ Multi-Cloud/On-Prem Support (ECS is AWS-only).
    ◦ Extensibility & Custom Resources (CRDs).
    ◦ Massive Open-Source Community & Ecosystem (Helm, Prometheus, Istio).
    ◦ Rich Scheduling Capabilities (affinity/anti-affinity, taints/tolerations).
    ◦ Native Service Mesh Integration.
    ◦ Namespaces for Multi-Tenancy.
    ◦ Clean Declarative Management.
    ◦ Pluggable Ingress Controller Support.
    ◦ Broader Logs & Monitoring Ecosystem.
    ◦ Mature CI/CD Ecosystem (ArgoCD, Jenkins X).

• What ECS Has That EKS Doesn’t (or Is More Complex in EKS):
    ◦ Simplicity & AWS-Native Experience: Tightly integrated with AWS services. EKS needs extra components for AWS integration.
    ◦ No Control Plane Costs (ECS is free, EKS costs $0.10/hour per cluster).
    ◦ Faster and Easier Setup.
    ◦ Simplified Networking (especially Fargate + awsvpc).
    ◦ Smaller Learning Curve.
    ◦ More Mature AWS Fargate Integration.
    ◦ Built-in Service Discovery (via AWS Cloud Map).
    ◦ Smaller Operational Overhead (AWS manages more).
    ◦ Better IAM Integration (roles per task without extra setup).
    ◦ Free Auto Scaling for Services (native, CloudWatch metrics).

2.13. AWS Route 53 (DNS Service)
• Purpose: A Domain Name System (DNS) service that translates human-readable website names (e.g., amazon.com) into IP addresses that computers understand. Like a phonebook for the internet.
• Why Important: Easy to use (names vs. IPs), handles dynamic IPs of cloud services, reliable & scalable, directs users to correct servers.
• Key Features:
    ◦ Domain Registration: Buy domain names directly.
    ◦ Hosted Zones: Where your DNS records live.
    ◦ DNS Records: Define how traffic is routed (A Record, CNAME Record, MX Record).
    ◦ Health Checks: Monitors servers and stops routing traffic if they go down.

2.14. AWS Load Balancers (Elastic Load Balancing - ELB)
• Purpose: Distribute incoming application traffic across multiple targets (e.g., EC2 instances, containers) in multiple Availability Zones to achieve fault tolerance, high availability, and scalability.

• OSI Model Basics: Load balancers work at different layers: Layer 7 (Application), Layer 4 (Transport), Layer 3 (Network).
• Types of Load Balancers:
    ◦ 1. Application Load Balancer (ALB):
        ▪ Best for: HTTP/HTTPS traffic (Layer 7 – Application Layer).
        ▪ Features: Content-based routing (URL path, hostname, headers), supports WebSockets/HTTP/2, native support for containerized apps, authentication, SSL termination.
        ▪ Use Cases: Microservices, web applications, APIs with different paths.
        ▪ Drawback: Costly, slightly slower due to content inspection.

    ◦ 2. Network Load Balancer (NLB):
        ▪ Best for: High-performance, low-latency TCP/UDP traffic (Layer 4 – Transport Layer).
        ▪ Features: Millions of requests/second, ultra-low latency, preserves client IP address, supports static/Elastic IPs, optional TLS termination.
        ▪ Use Cases: Gaming servers, real-time streaming, high-performance backend systems.
        ▪ Drawback: Limited to TCP/UDP routing, lacks deep packet inspection.

    ◦ 3. Gateway Load Balancer (GWLB):
        ▪ Best for: Deploying and scaling third-party virtual appliances (firewalls, packet inspection tools).
        ▪ Features: Layer 3 (Network Layer), transparent traffic forwarding using GRETAP.
        ▪ Use Cases: Intrusion Detection Systems (IDS), Firewalls, Deep Packet Inspection.

2.15. AWS Secrets Management
• Purpose: Securely storing, accessing, and rotating sensitive information (API keys, passwords, tokens, database credentials) without hardcoding them into code or config files.

• Main AWS Services:
    ◦ 1. AWS Secrets Manager:
        ▪ Stores highly sensitive secrets securely.
        ▪ Automatically rotates secrets (e.g., DB credentials) using Lambda.
        ▪ Audit logs via CloudTrail, fine-grained access control with IAM.
        ▪ Example: Store/rotate RDS database credentials.
    ◦ 2. AWS Systems Manager Parameter Store:
        ▪ Stores configuration data and secrets (with optional encryption).
        ▪ Can be used for infrastructure configuration, environment variables.
        ▪ Integrated with IAM and KMS. Slower and simpler than Secrets Manager; free tier available.
        ▪ Types: String (plain text), SecureString (encrypted with KMS).
        ▪ Suitable for less sensitive information (Docker usernames, registry URLs).
    ◦ 3. AWS Key Management Service (KMS):
        ▪ Manages encryption keys used by Secrets Manager, SSM, and other services to encrypt secrets. You don't manage secrets directly here, but rather the encryption keys.

• Best Practices: Use IAM roles/policies, never hardcode secrets, enable rotation, audit via CloudTrail, use environment variables/SDKs, never store secrets in source control or .env files.
• Combined Approach: Use Parameter Store for less sensitive data (cheaper, easier integration) and Secrets Manager for highly sensitive data (automatic rotation, higher security).
• Third-Party Solution: HashiCorp Vault for multi-cloud/hybrid environments.

2.16. AWS Config (Compliance Management)
• Purpose: A service to assess, audit, and evaluate the configurations of your AWS resources. Continuously monitors and records configurations and automates evaluation against desired configurations.

• Key Features:
    ◦ Resource Inventory & Configuration History: Maintains detailed inventory and historical changes.
    ◦ Compliance Evaluation: Uses AWS Config Rules (AWS-managed or custom via Lambda) to check compliance against best practices or policies.
    ◦ Change Tracking: Helps troubleshoot issues and security analysis.
    ◦ Integrations: Security Hub, CloudTrail, SNS, etc. Sends notifications or automates responses.

• Common Use Cases: Ensuring compliance (e.g., encrypted volumes), troubleshooting misconfigurations, security analysis, operational audits, tracking changes.
• How it Works: Enable Config, choose resources to track, set up S3 bucket for history/snapshots, (optional) set up SNS for notifications, create rules to evaluate compliance.
• Custom Rules: Create a Lambda function that returns COMPLIANT or NON_COMPLIANT and connect it to Config. Lambda is triggered by resource changes.

2.17. AWS CI/CD Services
• CI/CD Definition: Automating the software delivery process (integrating code changes, delivering to production).
• AWS CI/CD Suite:
    ◦ AWS CodeCommit: A fully managed Git repository service (like GitHub) for storing code in private repositories.
        ▪ Advantages: Managed service, scalability, private repos by default, reliability, integrates with AWS IAM.
        ▪ Disadvantages: Limited features compared to GitHub/GitLab (e.g., no Copilot, in-browser IDEs, fewer third-party integrations), simpler UI, less adoption.
    ◦ AWS CodePipeline: An orchestration service for automating the steps in your CI/CD pipeline.
    ◦ AWS CodeBuild: A build service for compiling code, running tests, and creating build artifacts.
    ◦ AWS CodeDeploy: A deployment service for automating the release of your software to environments like EC2 or Lambda.

--------------------------------------------------------------------------------
3. Cloud Migration Strategies
AWS defines 6 (or 7) Cloud Migration Strategies, often called the "Rs" of Cloud Migration.
• Cloud Migration Lifecycle (5 Stages):
    1. Preparation: Understand current environment, define business objectives, form migration team, skill readiness, initial assessment (inventory apps, dependencies), choose strategy, set up discovery tools.
    2. Planning: Design landing zone (VPC, IAM, logging), security/compliance planning, TCO/ROI analysis, define migration waves, select tools.
    3. Migration (Execution): Pilot migration (non-critical workloads), wave-based execution (Rehost, Replatform, Refactor), validate functionality/performance, data migration (DMS for databases).
    4. Monitoring: Track performance, security, availability post-migration using CloudWatch, X-Ray. Enable auditing with Config/CloudTrail. Performance testing.
    5. Optimization: Improve performance, reduce costs (Trusted Advisor, Cost Explorer, rightsizing), security hardening (WAF, Shield, GuardDuty), modernization (monoliths to microservices, serverless, managed services).

• The 6/7 R’s of Cloud Migration:
    1. Rehost ("Lift and Shift"): Move applications to AWS without major changes. Example: Moving a web server from on-prem to EC2 as-is.
    2. Replatform ("Lift, Tinker, and Shift"): Make a few cloud optimizations without changing the app core. Example: Moving a web app to EC2 but replacing on-prem DB with Amazon RDS.
    3. Repurchase: Switch to a new SaaS-based product. Example: Replacing self-hosted CRM with Salesforce.
    4. Refactor / Re-architect: Rebuild the app from scratch to use cloud-native features. Example: Rewriting a legacy app into a serverless architecture using AWS Lambda and DynamoDB.
    5. Retire: Decommission apps that are no longer useful. Example: Shutting down an obsolete report server.
    6. Retain: Keep the application on-premises (for now) due to compliance, dependency, or technical limitations.
    7. Relocate (7th R): Move entire virtualized environments (like VMware) to AWS without changing the hypervisor, applications, or underlying infrastructure using VMware Cloud on AWS.

--------------------------------------------------------------------------------
4. General AWS Concepts and DevOps Principles
• Latency: The delay between a user’s action and the response from the system; how long it takes for data to travel from point A to point B.

• Availability Zone (AZ): One or more data centers within an AWS region, isolated from failures in other AZs. Important for high availability, fault tolerance, disaster recovery, and scalability.

• Cloud Repatriation: The trend of moving workloads from public cloud back to on-premises or private cloud due to high costs, performance/latency issues, data control/compliance, security/privacy concerns, complexity, and vendor lock-in.

• Monitoring, Alerting, Reporting, Logging:
    ◦ Monitoring: Continuous observation of systems to track performance, availability, health (e.g., CloudWatch Metrics).
    ◦ Alerting: Notifies when something goes wrong or crosses a threshold (e.g., CloudWatch Alarms, SNS).
    ◦ Reporting: Summarizing performance data in human-readable format (e.g., CloudWatch Dashboards, Cost Explorer).
    ◦ Logging: Recording detailed, timestamped information about events (e.g., CloudWatch Logs, CloudTrail).
• Cost Optimization (General Tips): Use Spot Instances, Reserved Instances/Savings Plans, Auto Scaling, Lifecycle Policies for S3, delete unused resources (stale resources), use Lambda for event-driven workloads. DevOps engineers are responsible for identifying and cleaning up unused resources.
• Scaling: Automatically adjusting the number of compute resources based on demand.
    ◦ Horizontal Scaling: Adding more instances of a resource (e.g., more EC2 instances) to distribute the load. (This is predominantly covered by Auto Scaling Groups)
    ◦ Vertical Scaling: Increasing the capacity of a single resource (e.g., increasing an EC2 instance's CPU/memory).

• High Availability: Ensuring an application remains accessible and operational even if a component fails, often achieved by deploying resources across multiple Availability Zones.

• Security Best Practices: Implement least privilege principle for IAM, encrypt data (at rest and in transit), block public access where not needed, enable MFA, implement logging and monitoring.

--------------------------------------------------------------------------------
5. Missing from Sources (Recommended Additional Study)
While the provided sources are extensive, for a "Zero-to-Hero" Cloud/DevOps interview preparation, you would benefit from a dedicated deeper dive into these topics, some of which are mentioned briefly or implicitly:
• Amazon RDS (Relational Database Service): Types of database engines (MySQL, PostgreSQL, Aurora), Multi-AZ deployments, Read Replicas, storage types, backup, and recovery.
• Amazon DynamoDB: AWS's fully managed NoSQL database service (key-value and document database), its use cases, consistency models, and scaling.

• Amazon SNS (Simple Notification Service) / SQS (Simple Queue Service):
    ◦ SNS: Fully managed messaging service for application-to-person (A2P) and application-to-application (A2A) communication.
    ◦ SQS: Fully managed message queuing service for decoupling and scaling microservices, distributed systems, and serverless applications.

• AWS API Gateway: How it allows developers to create, publish, maintain, monitor, and secure APIs at any scale. Integration with Lambda, EC2, and other services.

• AWS CloudTrail: A service that helps enable governance, compliance, and operational and risk auditing of your AWS account. It records API calls and related events made by or on behalf of an AWS account.

• AWS Systems Manager (SSM) - Beyond Parameter Store: Explore other features like Session Manager (secure shell access), Run Command (execute commands on instances), Patch Manager (automate patching).

• VPC Peering & Transit Gateway: While mentioned in the Q&A section, a detailed conceptual explanation of how these enable network connectivity between VPCs.

• AWS Shield / WAF (Web Application Firewall): Dedicated explanations of these security services for protecting against DDoS attacks and filtering malicious web traffic.

• AWS Direct Connect / AWS VPN: Detailed comparison and use cases for hybrid cloud connectivity.

• Elastic IP vs. Public IP: The difference and why Elastic IPs are used for static public IP addresses.

